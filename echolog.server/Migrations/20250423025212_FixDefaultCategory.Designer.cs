// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using echolog.server.Data;

#nullable disable

namespace echolog.server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250423025212_FixDefaultCategory")]
    partial class FixDefaultCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("echolog.server.Models.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "BackendPort",
                            Value = "5000"
                        });
                });

            modelBuilder.Entity("echolog.server.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 1,
                            ShortDescription = "Low-power ESP32 weather + stats panel",
                            StatusId = 1,
                            Title = "E-Ink Dashboard",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 20, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 1,
                            ShortDescription = "CAN-bus spoofing for vintage Yamaha",
                            StatusId = 2,
                            Title = "XJR ECU Hack",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 4, 1, 17, 45, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 1,
                            ShortDescription = "RBAC + dashboard + detail view (React)",
                            StatusId = 1,
                            Title = "VeronicaX Frontend",
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("echolog.server.Models.ProjectDetail", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArchitectureSummary")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("KnownBugs")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectId");

                    b.ToTable("ProjectDetails");
                });

            modelBuilder.Entity("echolog.server.Models.ProjectFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("echolog.server.Models.ProjectFileCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProjectFileCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Documentation"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Screenshots"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Source"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Builds"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("echolog.server.Models.ProjectNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteText")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectNotes");
                });

            modelBuilder.Entity("echolog.server.Models.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProjectStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Abandoned"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Rewritten"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Frozen"
                        });
                });

            modelBuilder.Entity("echolog.server.Models.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProjectTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "System"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Module"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Device"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Experiment"
                        },
                        new
                        {
                            Id = 5,
                            Value = "Rewrite"
                        });
                });

            modelBuilder.Entity("echolog.server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 23, 2, 52, 12, 591, DateTimeKind.Utc).AddTicks(3105),
                            PasswordHash = "$2a$12$Uohw69joY3ac1DWKqD.wEuTp00Z4Y3a78HtEqYHraAwLPKdzcmHwm",
                            RoleId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("echolog.server.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Observer"
                        });
                });

            modelBuilder.Entity("echolog.server.Models.Project", b =>
                {
                    b.HasOne("echolog.server.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("echolog.server.Models.ProjectDetail", b =>
                {
                    b.HasOne("echolog.server.Models.Project", "Project")
                        .WithOne("Detail")
                        .HasForeignKey("echolog.server.Models.ProjectDetail", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("echolog.server.Models.ProjectFile", b =>
                {
                    b.HasOne("echolog.server.Models.ProjectFileCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("echolog.server.Models.Project", "Project")
                        .WithMany("Files")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("echolog.server.Models.ProjectNote", b =>
                {
                    b.HasOne("echolog.server.Models.Project", "Project")
                        .WithMany("Notes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("echolog.server.Models.User", b =>
                {
                    b.HasOne("echolog.server.Models.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("echolog.server.Models.Project", b =>
                {
                    b.Navigation("Detail");

                    b.Navigation("Files");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
